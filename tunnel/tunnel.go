// Tunnel for tentacle
//
// Copyright (c) 2013, The tentacle Authors. All rights reserved.
// http://github.com/jiusanzhou/tentacle
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package tunnels

import (
	"time"
	"net"
	"github.com/jiusanzhou/tentacle/log"
)

/**
 * Tunnel: A control connection, metadata and tcp connections which
 *         route public traffic to a firewalled endpoint.
 */
type Tunnel struct {
	// tunnel unique id, generated by, track data by this.
	id string

	// time when the tunnel was opened.
	start time.Time

	// data has receive as server.
	// receive int64

	// data has send as server.
	// send int64

	// time when last heartbeat has arrived.
	heartbeat time.Time

	// connection between server and client.
	conn *net.Conn

	// whether this tunnel is alive or not.
	isAlive bool

	// logger
	log.Logger
}

func NewTunnelToServer(index int, mac string, server string) (t *Tunnel, err error) {
	return
}

func NewTunnelFromClient(conn *net.Conn) (t *Tunnel, err error) {
	return
}
